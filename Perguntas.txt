1 - O que são operações de “Commit”, “Push” e “Pop” efetuadas num repositório?
No Git, as operações Commit, Push e Pop correspondem a diferentes momentos do ciclo de gestão de versões de um projeto.

Commit:
O commit é a operação central do Git e representa o registo permanente de um conjunto de alterações no repositório local.
Funciona como um “ponto de restauração” do código, permitindo regressar a um estado anterior sempre que necessário.
O processo típico envolve três etapas:

Modificar os ficheiros do projeto;

Adicionar as alterações à área de preparação com git add;

Registar as alterações com git commit.
Desta forma, cada commit cria um instantâneo (snapshot) do estado atual do projeto.

Push:
Após realizar commits localmente, o comando git push é utilizado para enviar essas alterações para um repositório remoto (por exemplo, no GitHub).
Esta operação sincroniza o repositório local com o remoto, tornando as modificações acessíveis a outros colaboradores.

Pop:
A operação pop não existe como comando principal do Git; contudo, surge frequentemente associada ao comando git stash pop.
O stash é um mecanismo que permite guardar temporariamente alterações que ainda não se pretende consolidar num commit, possibilitando alternar de branch ou realizar outras tarefas sem perder o trabalho em curso.
O git stash pop reaplica essas alterações ao código atual e, simultaneamente, remove-as da pilha de stashes.

2 – Quais sáo as vantagens de usar Branchs num repositório git?
Os branches são uma funcionalidade fundamental do Git, permitindo a criação de linhas de desenvolvimento independentes dentro de um mesmo projeto.

As principais vantagens são as seguintes:

Isolamento de alterações: cada branch representa um espaço de trabalho separado, o que evita interferências diretas no código principal (geralmente no main ou master).

Trabalho paralelo: diferentes colaboradores podem desenvolver funcionalidades, realizar correções ou testar novas abordagens em simultâneo, sem conflito entre si.

Facilidade de alternância: a mudança entre branches é rápida, permitindo alternar entre contextos de trabalho distintos.

Segurança e experimentação: é possível testar novas ideias ou funcionalidades sem comprometer a estabilidade do projeto principal.

Organização do fluxo de trabalho: o uso de branches favorece metodologias estruturadas, como o Git Flow, que define ramos específicos para desenvolvimento (develop), novas funcionalidades (feature branches) e correções (hotfixes).

3 – Nos Merges de conteúdos resultantes de um “Pop” podem resultar em conflitos. Em
que consistem e como podem ser resolvidos esses conflitos?
Quando é executado o comando git stash pop, o Git tenta reaplicar as alterações que foram anteriormente guardadas no stash ao estado atual do código.
Um conflito pode ocorrer quando as mesmas linhas de código foram modificadas tanto no stash como nos ficheiros que estão atualmente no branch.

Natureza do conflito:
O Git não consegue decidir automaticamente qual versão do código deve prevalecer — a guardada no stash ou a que já existe no repositório local — e, por isso, marca o ficheiro como “em conflito”.

Resolução de conflitos:

O Git insere marcadores visuais (<<<<<<<, =======, >>>>>>>) nos ficheiros afetados, indicando as partes em conflito.

O programador deve abrir o ficheiro e analisar as diferenças, decidindo qual versão manter (ou fundindo ambas, se necessário).

Após resolver manualmente o conflito, é necessário guardar o ficheiro e executá-lo com git add <nome-do-ficheiro> para marcar o problema como resolvido.
Depois de concluído este processo, o stash pop é finalizado e o trabalho pode prosseguir normalmente.

4 – “Clone” e “Fork” são formas diferentes de replicar um repositório Git. Quais as
diferenças entre eles?
Apesar de ambos permitirem replicar um repositório, clone e fork têm propósitos e contextos distintos.

Clone:
O comando git clone <url> cria uma cópia integral de um repositório remoto no computador local do utilizador.
Esta operação copia todo o histórico de versões e mantém uma ligação direta ao repositório original (denominado origin), permitindo receber atualizações (git pull) ou enviar alterações (git push), caso o utilizador tenha permissões de escrita.

Fork:
O fork é uma funcionalidade oferecida por plataformas de alojamento como o GitHub, e não um comando interno do Git.
Consiste na criação de uma cópia do repositório de outro utilizador na conta pessoal do programador.
É uma prática comum em projetos de código aberto (open source), onde o fluxo de trabalho típico é o seguinte:

Efetuar fork do repositório original para a conta pessoal;

Clonar o fork localmente com git clone;

Implementar as alterações desejadas;

Enviar as alterações para o fork remoto e, posteriormente, propor a integração com o projeto original através de um Pull Request.

Assim, enquanto o clone é uma cópia local de um repositório remoto, o fork representa uma cópia remota independente criada no servidor.